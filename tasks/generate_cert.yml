---
- name: Check for existing certificate
  ansible.builtin.stat:
    path: "{{ nebula_certificate_location }}/{{ ansible_hostname }}.crt"
  register: nebula_host_cert

- name: Copy ca.key to host for certificate generation
  ansible.builtin.copy:
    src: "{{ role_path }}/files/ca.key"
    dest: "{{ nebula_certificate_location }}"
    mode: '0644'
  when: nebula_host_cert.stat.exists is false

- name: Generate CA if not existing
  ansible.builtin.command: |
    /usr/local/bin/nebula-cert sign -name "{{ ansible_hostname }}" -ip "{{ nebula_ip }}/24"
  args:
    chdir: "{{ nebula_certificate_location }}"
  when: nebula_host_cert.stat.exists is false

- name: Generate CA if not existing
  ansible.builtin.command: |
    /usr/local/bin/nebula-cert sign -name "{{ ansible_hostname }}" -ip "{{ nebula_ip }}/24" -subnets "{{ nebula_extra_subnet }}/24"
  args:
    chdir: "{{ nebula_certificate_location }}"
  when: 
    - nebula_host_cert.stat.exists is false
    - nebula_extra_subnet is defined

- name: Remove ca.key after certificate generation
  ansible.builtin.file:
    path: "{{ nebula_certificate_location }}/ca.key"
    state: absent
